name: Deploy to EC2

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        working-directory: ./web
        run: pnpm install --frozen-lockfile
      
      - name: Run linter
        working-directory: ./web
        run: pnpm lint || true
      
      - name: Run tests
        working-directory: ./web
        run: pnpm test || true
      
      - name: Build application
        working-directory: ./web
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          pnpm prisma generate
          pnpm build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd /var/www/houseiana/web
            
            # Pull latest changes
            git fetch origin
            git reset --hard origin/main
            
            # Install dependencies if needed
            pnpm install --frozen-lockfile
            
            # Generate Prisma client
            pnpm prisma generate
            
            # Build application
            pnpm build
            
            # Reload PM2
            pm2 reload ecosystem.config.js --update-env
            
            # Health check
            sleep 5
            curl -f http://localhost:3000/api/health || exit 1
            
            echo "Deployment completed successfully!"

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          text: |
            Deployment ${{ job.status == 'success' && 'succeeded' || 'failed' }}
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}